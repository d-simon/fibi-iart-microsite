$debug-media-queries:          false !default;

//** Computed breakpoints **//
$screen-xs-min:                480px !default;
$screen-sm-min:                768px !default;
$screen-md-min:                992px !default;
$screen-lg-min:               1200px !default;

$screen-xs-max: ($screen-sm-min - 1);
$screen-sm-max: ($screen-md-min - 1);
$screen-md-max: ($screen-lg-min - 1);

//** Break point definitions for the "include-media" SCSS plugin. **//
$breakpoints: (
    xs:  $screen-xs-max,
    sm:  $screen-sm-max,
    md:  $screen-md-max,
    lg:  $screen-lg-min
);


//** Media expressions for the "include-media" SCSS plugin. **//
$media-expressions: (
    // media types
    screen: "screen",

    // width
    xs: "(max-width: #{$screen-xs-max})",
    sm: ("(min-width: #{$screen-sm-min}) and (max-width: #{$screen-sm-max})"),
    md: ("(min-width: #{$screen-md-min}) and (max-width: #{$screen-md-max})"),
    lg: "(min-width: #{$screen-lg-min})",

    // resolution
    res2x: ("(-webkit-min-device-pixel-ratio: 2)", "(min-resolution: 192dpi)", "(min-resolution: 2.0dppx)"),
    res3x: ("(-webkit-min-device-pixel-ratio: 3)", "(min-resolution: 350dpi)", "(min-resolution: 3.0dppx)"),

    // orientation
    portrait: "(orientation: portrait)",
    landscape: "(orientation: landscape)",
);


//** MQ JS Hook **//
body::before {
    content: "";
    // visibility: hidden;
    // position: absolute;
    // width: 1px; height: 1px;
    // padding: 0;
    // margin: -1px;
    // overflow: hidden;
    // clip: rect(0,0,0,0);
    // border: 0;
}


//** Helpers to convert current screen informations to json. **//
@function mq-label($size, $orientation, $resolution) {
    @return '{"screen":"#{$size}","orientation":"#{$orientation}","resolution":"#{$resolution}"}';
}

@mixin mq-render($size: "", $orientation: "", $resolution: "") {
    @if $size == "" {
        @include mq-write($size, $orientation, $resolution);
    }
    @else if $orientation == "" {
        @include media($size) {
            @include mq-write($size);
        }
    }
    @else if $resolution == "" {
        @include media($size, $orientation) {
            @include mq-write($size, $orientation);
        }
    }
    @else {
        @include media($size, $resolution, $orientation) {
            @include mq-write($size, $resolution, $orientation);
        }
    }
}

@mixin mq-write($size: "", $resolution: "", $orientation: "") {
    body::before { content: mq-label($size, $resolution, $orientation); }
    .lt-ie9 head { font-family: mq-label($size, $resolution, $orientation); }
}

@mixin mq-size($size) {
    @include mq-render($size);
    @include mq-orientation($size, "portrait");
    @include mq-orientation($size, "landscape");
}

@mixin mq-orientation($size, $orientation) {
    @include mq-render($size, $orientation);
    @include mq-resolution($size, $orientation, "res2x");
    @include mq-resolution($size, $orientation, "res3x");
}

@mixin mq-resolution($size, $orientation, $resolution) {
    @include mq-render($size, $orientation, $resolution);
}


//** Compile basic information about the viewport in a readable JSON object. **//
@if $debug-media-queries == true {
    @include mq-render();
    @include mq-size("xs");
    @include mq-size("sm");
    @include mq-size("md");
    @include mq-size("lg");
}